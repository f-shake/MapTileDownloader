using EmbedIO;
using EmbedIO.Routing;
using EmbedIO.WebApi;
using System;
using System.IO;
using System.Text;
using System.Threading;
using System.Threading.Tasks;

namespace MapTileDownloader.Services
{   
    public class TileServerService : IDisposable
    {
        private readonly TileServerOptions options;

        private MbtilesService mbtilesService;

        private WebServer server;

        private TileServerService(TileServerOptions options)
        {
            if (options == null)
            {
                throw new ArgumentNullException(nameof(options));
            }

            if (!File.Exists(options.MbtilesPath))
            {
                throw new FileNotFoundException("MBTiles文件不存在", options.MbtilesPath);
            }

            this.options = options;
        }

        public string MbtilesPath => options.MbtilesPath;

        public static async Task RunAsync(TileServerOptions options, CancellationToken cancellationToken)
        {
            using TileServerService serverService = new TileServerService(options);
            await serverService.StartAsync(cancellationToken).ConfigureAwait(false);
        }

        public void Dispose()
        {
            server?.Dispose();
            GC.SuppressFinalize(this);
        }

        public async Task StartAsync(CancellationToken cancellationToken)
        {
            mbtilesService = new MbtilesService(options.MbtilesPath, true);
            await mbtilesService.InitializeAsync().ConfigureAwait(false);
            var host = options.LocalhostOnly ? "localhost" : "*";
            var url = $"http://{host}:{options.Port}/";

            server = new WebServer(o => o
                .WithUrlPrefix(url)
                .WithMode(HttpListenerMode.EmbedIO))
                .WithWebApi("/", m => m.WithController(() => new TileController(mbtilesService, options.ReturnEmptyPngWhenNotFound)));

            await server.RunAsync(cancellationToken);
        }

        public class TileServerOptions
        {
            public bool LocalhostOnly { get; set; } = true;
            public string MbtilesPath { get; set; }
            public int Port { get; set; } = 8888;
            public bool ReturnEmptyPngWhenNotFound { get; set; } = true;
        }
        private class TileController : WebApiController
        {
            private static readonly byte[] emptyPng = new byte[] {
               0x89, 0x50, 0x4E, 0x47, 0x0D, 0x0A, 0x1A, 0x0A, 0x00, 0x00, 0x00, 0x0D, 0x49, 0x48, 0x44, 0x52, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x01, 0x00, 0x08, 0x04, 0x00, 0x00, 0x00, 0xF6, 0x7B, 0x60, 0xED, 0x00, 0x00, 0x00, 0x09, 0x70, 0x48, 0x59, 0x73, 0x00, 0x00, 0x94, 0x19, 0x00, 0x00, 0x94, 0x19, 0x01, 0xB4, 0x21, 0xAE, 0xEC, 0x00, 0x00, 0x00, 0x20, 0x63, 0x48, 0x52, 0x4D, 0x00, 0x00, 0x7A, 0x25, 0x00, 0x00, 0x80, 0x83, 0x00, 0x00, 0xF9, 0xFF, 0x00, 0x00, 0x80, 0xE9, 0x00, 0x00, 0x75, 0x30, 0x00, 0x00, 0xEA, 0x60, 0x00, 0x00, 0x3A, 0x98, 0x00, 0x00, 0x17, 0x6F, 0x92, 0x5F, 0xC5, 0x46, 0x00, 0x00, 0x05, 0xDC, 0x49, 0x44, 0x41, 0x54, 0x78, 0xDA, 0xEC, 0xDD, 0x59, 0x6E, 0x1B, 0x57, 0x10, 0x46, 0xE1, 0xD6, 0x0F, 0x79, 0x29, 0x71, 0x04, 0x64, 0x8F, 0x26, 0xBC, 0x48, 0x03, 0x8E, 0xB3, 0x94, 0x04, 0x51, 0x1E, 0xEC, 0x68, 0x1E, 0x28, 0xB2, 0xD9, 0x5D, 0x55, 0xE7, 0xDC, 0x27, 0xE9, 0x95, 0xE7, 0x43, 0xB3, 0xD9, 0xC3, 0xAD, 0xAB, 0x2F, 0xB7, 0x8B, 0x0B, 0xBC, 0xE2, 0x47, 0xC0, 0x5E, 0xD7, 0x77, 0x7F, 0xFD, 0x58, 0x6E, 0xBE, 0x7A, 0x34, 0x40, 0xAC, 0xC3, 0xD5, 0xF2, 0x7D, 0xF9, 0xFC, 0xF4, 0x08, 0xF0, 0x79, 0xF9, 0x7E, 0xB8, 0xF2, 0xC3, 0x61, 0xE5, 0x7F, 0xFC, 0x15, 0x20, 0x01, 0x56, 0xFE, 0x1F, 0xF7, 0x00, 0x3E, 0xFD, 0xFC, 0x47, 0x02, 0xA8, 0xFC, 0x37, 0x77, 0x00, 0xBE, 0xFE, 0xB3, 0xFC, 0x21, 0x01, 0x5A, 0xFE, 0x9F, 0x67, 0x7C, 0xBF, 0xBE, 0x02, 0x24, 0xC0, 0xCC, 0xFF, 0xE0, 0x1C, 0x40, 0x02, 0xC4, 0xFC, 0x8F, 0x4E, 0x02, 0x25, 0xC0, 0xCB, 0xFF, 0xE4, 0x42, 0x90, 0x04, 0x68, 0xF9, 0x9F, 0x5D, 0x09, 0x94, 0x00, 0x2B, 0xFF, 0x0B, 0x97, 0x82, 0x25, 0x40, 0xCA, 0xFF, 0xE2, 0xBD, 0x00, 0x09, 0x70, 0xF2, 0xBF, 0x72, 0x33, 0x48, 0x02, 0x94, 0xFC, 0xAF, 0xDE, 0x0D, 0x94, 0x00, 0x23, 0xFF, 0x1B, 0xB7, 0x83, 0x25, 0x40, 0xC8, 0xFF, 0xE6, 0xF3, 0x00, 0x12, 0x98, 0x9F, 0xFF, 0x9D, 0x07, 0x42, 0x24, 0x30, 0x3D, 0xFF, 0xBB, 0x4F, 0x04, 0x49, 0x60, 0x76, 0xFE, 0x23, 0x1E, 0x09, 0x93, 0xC0, 0xE4, 0xFC, 0x47, 0x3D, 0x13, 0x28, 0x81, 0xB9, 0xF9, 0x8F, 0x7C, 0x28, 0x54, 0x02, 0x53, 0xF3, 0x1F, 0xFD, 0x54, 0xB0, 0x04, 0x66, 0xE6, 0xFF, 0xC0, 0x63, 0xE1, 0x12, 0x98, 0x98, 0xFF, 0x43, 0xEF, 0x05, 0x48, 0x60, 0x5E, 0xFE, 0x0F, 0xBE, 0x18, 0x22, 0x81, 0x69, 0xF9, 0x3F, 0xFC, 0x66, 0x90, 0x04, 0x66, 0xE5, 0x3F, 0xE1, 0xD5, 0x30, 0x09, 0x4C, 0xCA, 0x7F, 0xD2, 0xBB, 0x81, 0x12, 0x98, 0x93, 0xFF, 0xC4, 0x97, 0x43, 0x25, 0x30, 0x25, 0xFF, 0xC9, 0x6F, 0x07, 0x4B, 0x60, 0x46, 0xFE, 0x33, 0x5E, 0x0F, 0x97, 0xC0, 0x84, 0xFC, 0x67, 0xED, 0x0F, 0x20, 0x81, 0xFE, 0xF9, 0xCF, 0xDC, 0x20, 0x42, 0x02, 0xDD, 0xF3, 0x9F, 0xBD, 0x43, 0x88, 0x04, 0x7A, 0xE7, 0x5F, 0x61, 0x8B, 0x18, 0x09, 0x74, 0xCE, 0xBF, 0xCA, 0x1E, 0x41, 0x12, 0xE8, 0x9B, 0x7F, 0xA5, 0x4D, 0xA2, 0x24, 0xD0, 0x35, 0xFF, 0x6A, 0xBB, 0x84, 0x49, 0xA0, 0x67, 0xFE, 0x15, 0xB7, 0x89, 0x93, 0x40, 0xC7, 0xFC, 0xAB, 0xEE, 0x13, 0x28, 0x81, 0x7E, 0xF9, 0x57, 0xDE, 0x28, 0x52, 0x02, 0xDD, 0xF2, 0xAF, 0xBE, 0x53, 0xA8, 0x04, 0x7A, 0xE5, 0xBF, 0xC0, 0x56, 0xB1, 0x12, 0xE8, 0x94, 0xFF, 0x22, 0x7B, 0x05, 0x4B, 0xA0, 0x4F, 0xFE, 0x0B, 0x6D, 0x16, 0x2D, 0x81, 0x2E, 0xF9, 0x2F, 0xB6, 0x5B, 0xB8, 0x04, 0x7A, 0xE4, 0xBF, 0xE0, 0x76, 0xF1, 0x12, 0xE8, 0x90, 0xFF, 0xA2, 0xF3, 0x02, 0x24, 0x50, 0x3F, 0xFF, 0x85, 0x07, 0x46, 0x48, 0xA0, 0x7A, 0xFE, 0x8B, 0x4F, 0x0C, 0x91, 0x40, 0xED, 0xFC, 0x1B, 0x8C, 0x8C, 0x91, 0x40, 0xE5, 0xFC, 0x9B, 0xCC, 0x0C, 0x92, 0x40, 0xDD, 0xFC, 0x1B, 0x0D, 0x8D, 0x92, 0x40, 0xD5, 0xFC, 0x9B, 0x4D, 0x0D, 0x93, 0x40, 0xCD, 0xFC, 0x1B, 0x8E, 0x8D, 0x93, 0x40, 0xC5, 0xFC, 0x9B, 0xCE, 0x0D, 0x94, 0x40, 0xBD, 0xFC, 0x1B, 0x0F, 0x8E, 0x94, 0x40, 0xB5, 0xFC, 0x9B, 0x4F, 0x0E, 0x95, 0x40, 0xAD, 0xFC, 0x3B, 0x8C, 0x8E, 0x95, 0x40, 0xA5, 0xFC, 0xBB, 0xCC, 0x0E, 0x96, 0x40, 0x9D, 0xFC, 0x3B, 0x0D, 0x8F, 0x96, 0x40, 0x95, 0xFC, 0xBB, 0x4D, 0x0F, 0x97, 0x40, 0x8D, 0xFC, 0x3B, 0x8E, 0x8F, 0xA7, 0x13, 0xA8, 0x91, 0x7F, 0x47, 0x00, 0x6C, 0x02, 0x55, 0xF2, 0xEF, 0x0A, 0x80, 0x4B, 0xA0, 0x4E, 0xFE, 0x9D, 0x01, 0x30, 0x09, 0x54, 0xCA, 0xBF, 0x3B, 0x00, 0x1E, 0x81, 0xC3, 0x75, 0xA5, 0xFC, 0x05, 0x00, 0xB0, 0x08, 0x1C, 0xAE, 0x97, 0x6F, 0x95, 0xF2, 0x97, 0x00, 0xC0, 0x21, 0x50, 0x2F, 0x7F, 0x11, 0x00, 0x0C, 0x02, 0x15, 0xF3, 0x97, 0x01, 0x30, 0x9F, 0x40, 0xCD, 0xFC, 0x85, 0x00, 0xCC, 0x26, 0x50, 0x35, 0x7F, 0x29, 0x00, 0x73, 0x09, 0xD4, 0xCD, 0x5F, 0x0C, 0xC0, 0x4C, 0x02, 0x95, 0xF3, 0x97, 0x03, 0x30, 0x8F, 0x40, 0xED, 0xFC, 0x05, 0x01, 0xCC, 0x22, 0x50, 0x3D, 0x7F, 0x49, 0x00, 0x73, 0x08, 0xD4, 0xCF, 0x5F, 0x14, 0xC0, 0x0C, 0x02, 0x1D, 0xF2, 0x97, 0x05, 0xD0, 0x9F, 0x40, 0x8F, 0xFC, 0x85, 0x01, 0xF4, 0x26, 0xD0, 0x25, 0x7F, 0x69, 0x00, 0x7D, 0x09, 0xF4, 0xC9, 0x5F, 0x1C, 0x40, 0x4F, 0x02, 0x9D, 0xF2, 0x97, 0x07, 0xD0, 0x8F, 0x40, 0xAF, 0xFC, 0x0D, 0x00, 0xF4, 0x22, 0xD0, 0x2D, 0x7F, 0x0B, 0x00, 0x7D, 0x08, 0xF4, 0xCB, 0xDF, 0x04, 0x40, 0x0F, 0x02, 0x1D, 0xF3, 0xB7, 0x01, 0x50, 0x9F, 0x40, 0xCF, 0xFC, 0x8D, 0x00, 0xD4, 0x26, 0xD0, 0x35, 0x7F, 0x2B, 0x00, 0x75, 0x09, 0xF4, 0xCD, 0xDF, 0x0C, 0x40, 0x4D, 0x02, 0x9D, 0xF3, 0xB7, 0x03, 0x50, 0x8F, 0x40, 0xEF, 0xFC, 0x0D, 0x01, 0xD4, 0x22, 0xD0, 0x3D, 0x7F, 0x4B, 0x00, 0x75, 0x08, 0xF4, 0xCF, 0xDF, 0x14, 0x40, 0x0D, 0x02, 0x13, 0xF2, 0xB7, 0x05, 0xB0, 0x3F, 0x81, 0x19, 0xF9, 0x1B, 0x03, 0xD8, 0x97, 0xC0, 0x94, 0xFC, 0xAD, 0x01, 0xEC, 0x47, 0x60, 0x4E, 0xFE, 0xE6, 0x00, 0xF6, 0x21, 0x30, 0x29, 0x7F, 0x7B, 0x00, 0xDB, 0x13, 0x98, 0x95, 0x7F, 0x00, 0x80, 0x6D, 0x09, 0x4C, 0xCB, 0x3F, 0x02, 0xC0, 0x76, 0x04, 0xE6, 0xE5, 0x1F, 0x02, 0x60, 0x1B, 0x02, 0x13, 0xF3, 0x8F, 0x01, 0x70, 0x79, 0x02, 0x33, 0xF3, 0x0F, 0x02, 0x70, 0x59, 0x02, 0x53, 0xF3, 0x8F, 0x02, 0x70, 0x39, 0x02, 0x73, 0xF3, 0x0F, 0x03, 0x70, 0x19, 0x02, 0x93, 0xF3, 0x8F, 0x03, 0xB0, 0x3E, 0x81, 0xD9, 0xF9, 0x07, 0x02, 0x58, 0x97, 0xC0, 0xF4, 0xFC, 0x23, 0x01, 0xAC, 0x47, 0x60, 0x7E, 0xFE, 0xA1, 0x00, 0xD6, 0x21, 0x40, 0xC8, 0x3F, 0x16, 0xC0, 0xF9, 0x04, 0x18, 0xF9, 0x07, 0x03, 0x38, 0x8F, 0x00, 0x25, 0xFF, 0x68, 0x00, 0xA7, 0x13, 0xE0, 0xE4, 0x1F, 0x0E, 0xE0, 0x34, 0x02, 0xA4, 0xFC, 0xE3, 0x01, 0x7C, 0x9C, 0x00, 0x2B, 0x3F, 0x00, 0xC0, 0xC7, 0x08, 0xD0, 0xF2, 0x23, 0x00, 0x1C, 0x4F, 0x80, 0x97, 0x1F, 0x02, 0xE0, 0x38, 0x02, 0xC4, 0xFC, 0x18, 0x00, 0xEF, 0x13, 0x60, 0xE6, 0x07, 0x01, 0x78, 0x9B, 0x00, 0x35, 0x3F, 0x0A, 0xC0, 0xEB, 0x04, 0xB8, 0xF9, 0x61, 0x00, 0x5E, 0x26, 0x40, 0xCE, 0x8F, 0x03, 0xF0, 0x9C, 0x00, 0x3B, 0x3F, 0x10, 0xC0, 0x13, 0x02, 0x7F, 0xB2, 0xF3, 0x23, 0x01, 0x3C, 0x22, 0xF0, 0x1B, 0x3B, 0x3F, 0x14, 0xC0, 0x2F, 0x02, 0xF7, 0x0B, 0x9B, 0x1F, 0x0B, 0xC0, 0x05, 0x07, 0x70, 0xB8, 0x5E, 0xBE, 0x3D, 0xF8, 0x17, 0x35, 0xBC, 0x5E, 0x00, 0x0F, 0x7F, 0xF8, 0xFD, 0x45, 0x1B, 0x5E, 0x2F, 0x80, 0xC7, 0xBF, 0xFB, 0x7F, 0x67, 0x0D, 0xAF, 0x17, 0xC0, 0xB3, 0xCB, 0x3E, 0xA4, 0xE1, 0xF5, 0x02, 0x78, 0xF1, 0xAA, 0x1F, 0x9B, 0x40, 0xE8, 0xF9, 0xE9, 0x04, 0x62, 0x7E, 0x36, 0x81, 0x98, 0x9F, 0x4D, 0x20, 0xE6, 0x67, 0x13, 0x88, 0xF9, 0xD9, 0x04, 0x62, 0x7E, 0x36, 0x81, 0x98, 0x9F, 0x4D, 0x20, 0xE6, 0x67, 0x13, 0x88, 0xF9, 0xD9, 0x04, 0x62, 0x7E, 0x36, 0x81, 0x98, 0x9F, 0x4D, 0x20, 0xE6, 0x67, 0x13, 0x88, 0xF9, 0xD9, 0x04, 0x62, 0x7E, 0x36, 0x81, 0x98, 0x9F, 0x4D, 0x20, 0xE6, 0x67, 0x13, 0x88, 0xF9, 0xD9, 0x04, 0x62, 0x7E, 0x36, 0x81, 0x98, 0x9F, 0x4D, 0x20, 0xE6, 0x67, 0x13, 0x88, 0xF9, 0xD9, 0x04, 0x62, 0x7E, 0x36, 0x81, 0x98, 0x9F, 0x4D, 0x20, 0xE6, 0x67, 0x13, 0x88, 0xF9, 0xD9, 0x04, 0x62, 0x7E, 0x36, 0x81, 0x98, 0x9F, 0x4D, 0x20, 0xE6, 0x67, 0x13, 0x88, 0xF9, 0xD9, 0x04, 0x62, 0x7E, 0x36, 0x81, 0x98, 0x9F, 0x4D, 0x20, 0xE6, 0x67, 0x13, 0x88, 0xF9, 0xD9, 0x04, 0x62, 0x7E, 0x36, 0x81, 0x98, 0x9F, 0x4D, 0x20, 0xE6, 0x67, 0x13, 0x88, 0xF9, 0xD9, 0x04, 0x62, 0x7E, 0x36, 0x81, 0x98, 0x9F, 0x4D, 0x20, 0xE6, 0x67, 0x13, 0x88, 0xF9, 0xD9, 0x04, 0x62, 0x7E, 0x36, 0x81, 0x98, 0x9F, 0x4D, 0x20, 0xE6, 0x67, 0x13, 0x88, 0xF9, 0xD9, 0x04, 0x62, 0x7E, 0x36, 0x81, 0x98, 0x9F, 0x4D, 0x20, 0xE6, 0x67, 0x13, 0x88, 0xF9, 0xD9, 0x04, 0x62, 0x7E, 0x36, 0x81, 0x98, 0x9F, 0x4D, 0x20, 0xE6, 0x67, 0x13, 0x88, 0xF9, 0xD9, 0x04, 0x62, 0x7E, 0x36, 0x81, 0x98, 0x9F, 0x4D, 0x20, 0xE6, 0x67, 0x13, 0x88, 0xF9, 0xD9, 0x04, 0x62, 0x7E, 0x36, 0x81, 0x98, 0x9F, 0x4D, 0x20, 0xE6, 0x67, 0x13, 0x88, 0xF9, 0xD9, 0x04, 0x62, 0x7E, 0x36, 0x81, 0x98, 0x9F, 0x4D, 0x20, 0xE6, 0x67, 0x13, 0x88, 0xF9, 0xD9, 0x04, 0x62, 0x7E, 0x36, 0x81, 0x98, 0x9F, 0x4D, 0x20, 0xE6, 0x67, 0x13, 0x88, 0xF9, 0xD9, 0x04, 0x62, 0xFE, 0x62, 0x04, 0x6E, 0xB6, 0x25, 0x10, 0xF3, 0x17, 0x23, 0x70, 0xBB, 0x2D, 0x81, 0x98, 0x9F, 0x4D, 0x20, 0xE6, 0x67, 0x13, 0x88, 0xF9, 0xD9, 0x04, 0x62, 0x7E, 0x36, 0x81, 0x98, 0x9F, 0x4D, 0x20, 0xE6, 0x67, 0x13, 0x88, 0xF9, 0xD9, 0x04, 0x62, 0x7E, 0x36, 0x81, 0x98, 0x9F, 0x4D, 0x20, 0xE6, 0x67, 0x13, 0x88, 0xF9, 0xD9, 0x04, 0x62, 0x7E, 0x36, 0x81, 0x98, 0x9F, 0x4D, 0x20, 0xE6, 0x67, 0x13, 0x88, 0xF9, 0xD9, 0x04, 0x62, 0x7E, 0x36, 0x81, 0x98, 0x9F, 0x4D, 0x20, 0xE6, 0x67, 0x13, 0x88, 0xF9, 0xD9, 0x04, 0x62, 0x7E, 0x36, 0x81, 0x98, 0x9F, 0x4D, 0x20, 0xE6, 0x67, 0x13, 0x88, 0xF9, 0xD9, 0x04, 0x62, 0x7E, 0x36, 0x81, 0x98, 0x9F, 0x4D, 0x20, 0xE6, 0x67, 0x13, 0x88, 0xF9, 0xD9, 0x04, 0x62, 0x7E, 0x36, 0x81, 0x98, 0x9F, 0x4D, 0x20, 0xE6, 0x67, 0x13, 0x88, 0xF9, 0xD9, 0x04, 0x62, 0x7E, 0x36, 0x81, 0x98, 0x9F, 0x4D, 0x20, 0xE6, 0x67, 0x13, 0x88, 0xF9, 0xD9, 0x04, 0x62, 0x7E, 0x36, 0x81, 0x98, 0x9F, 0x4D, 0x20, 0xE6, 0x67, 0x13, 0x88, 0xF9, 0xD9, 0x04, 0x62, 0x7E, 0x36, 0x81, 0x98, 0x9F, 0x4D, 0x20, 0xE6, 0x67, 0x13, 0x88, 0xF9, 0xD9, 0x04, 0x62, 0x7E, 0x36, 0x81, 0x98, 0x9F, 0x4D, 0xE0, 0xEA, 0xCB, 0xED, 0xB2, 0x2C, 0x9F, 0xCC, 0xCF, 0x58, 0x87, 0xAB, 0xE5, 0xFB, 0x7D, 0xE9, 0xE5, 0xDF, 0xFF, 0x8F, 0x00, 0x7F, 0x9B, 0x9F, 0x78, 0x14, 0x78, 0xFA, 0x2B, 0xC0, 0xFC, 0x34, 0x02, 0x8F, 0x00, 0x98, 0x9F, 0x47, 0xE0, 0xEE, 0x1C, 0xC0, 0x85, 0x5D, 0xF1, 0x23, 0x60, 0xAF, 0xFF, 0x06, 0x00, 0x93, 0x2B, 0xB3, 0xE0, 0x2A, 0x3C, 0xD0, 0x05, 0x00, 0x00, 0x00, 0x00, 0x49, 0x45, 0x4E, 0x44, 0xAE, 0x42, 0x60, 0x82
            };

            private readonly bool returnEmptyPngWhenNotFound;

            public TileController(MbtilesService mbtilesService, bool returnEmptyPngWhenNotFound)
            {
                MbtilesService = mbtilesService;
                this.returnEmptyPngWhenNotFound = returnEmptyPngWhenNotFound;
            }

            public MbtilesService MbtilesService { get; }
            
            [Route(HttpVerbs.Get, "/{z}/{x}/{y}")]
            public async Task GetTileAsync(int z, int x, int y)
            {
                var data = await MbtilesService.GetTileAsync(x, y, z).ConfigureAwait(false);
                if (data == null)
                {
                    if (returnEmptyPngWhenNotFound)
                    {
                        await HttpContext.Response.OutputStream.WriteAsync(emptyPng);
                    }
                    else
                    {
                        Response.StatusCode = 404;
                        await Response.OutputStream.WriteAsync("Tile not found"u8.ToArray());
                    }
                    return;
                }

                HttpContext.Response.ContentType = GetImageMimeType(data);
                await HttpContext.Response.OutputStream.WriteAsync(data);
            }

            private static string GetImageMimeType(byte[] fileBytes)
            {
                if (fileBytes.Length < 4)
                {
                    return "application/octet-stream";
                }

                if (fileBytes[0] == 0xFF && fileBytes[1] == 0xD8 && fileBytes[2] == 0xFF)
                {
                    return "image/jpeg";
                }

                if (fileBytes[0] == 0x89 && fileBytes[1] == 0x50 && fileBytes[2] == 0x4E && fileBytes[3] == 0x47)
                {
                    return "image/png";
                }

                if (fileBytes[0] == 0x47 && fileBytes[1] == 0x49 && fileBytes[2] == 0x46 && fileBytes[3] == 0x38)
                {
                    return "image/gif";
                }

                if (fileBytes[0] == 0x52 && fileBytes[1] == 0x49 && fileBytes[2] == 0x46 && fileBytes[3] == 0x46)
                {
                    if (fileBytes.Length >= 12 && fileBytes[8] == 0x57 && fileBytes[9] == 0x45 && fileBytes[10] == 0x42 && fileBytes[11] == 0x50)
                    {
                        return "image/webp";
                    }
                }

                if (fileBytes[0] == 0x42 && fileBytes[1] == 0x4D)
                {
                    return "image/bmp";
                }

                if (fileBytes[0] == 0x3C && fileBytes[1] == 0x3F && fileBytes[2] == 0x78 && fileBytes[3] == 0x6D)
                {
                    return "image/svg+xml";
                }

                if (fileBytes[0] == 0x00 && fileBytes[1] == 0x00 && fileBytes[2] == 0x01 && fileBytes[3] == 0x00)
                {
                    return "image/x-icon";
                }

                return "application/octet-stream";
            }
        }
    }
}